/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Stereo
  Standard 1st order planewave encoder

  This operates on one source.

---------------------------------------------------------------------
*/

desc: ATK FOA Encode Stereo
// Encode a stereo signal as two directional planewaves


// Import library with shared functions, also imports cookdsp
import ../../libraries/atk/atk.jsfx-inc


slider1:180<0,180,1>Spread (mouse)

in_pin:L
in_pin:R

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z


/**********************************************************
Initialisation
**********************************************************/
@init

// Allocation of memory for matrixes used for DSP processing
matrixDSP       = 1200;
matrixNewDSP    = 1220;
matrixInc       = 1240;

// Flag indicating that the plugin has not been fully initialised yet
mInitialised = 0;

// Initiate graphics
gfx_ext_retina = 1;

// Initialisation of user interaction parameters
mPreviousMouseCap = 0;
mClickingAtCircle = 0;


function calculateCoefficients()
(
  // Interaction point:
  mCosAzi  = cos(mAzimuth);
  mSinAzi  = sin(mAzimuth);
  
  // W
  matrixNewDSP[0] =  kInvSqrt2;
  matrixNewDSP[1] =  kInvSqrt2;
  // X
  matrixNewDSP[2] =  mCosAzi;
  matrixNewDSP[3] =  mCosAzi;
  // Y
  matrixNewDSP[4] =  mSinAzi;
  matrixNewDSP[5] = -mSinAzi;
  // Z
  matrixNewDSP[6] =  0.;
  matrixNewDSP[7] =  0.;
  
  // Set initial DSP processing coefficients if the plugin has not yet been initialised
  mInitialised == 0 ?
  (
    i = 0;
    loop(8,
      matrixDSP[i] = matrixNewDSP[i];
    );
    // Now we are fully initialised
    mInitialised = 1;
  );
);


/**********************************************************
Updated slider value:
**********************************************************/
@slider

mAzimuth     = 0.5 * slider1 * kDeg2Rad;
calculateCoefficients();


/**********************************************************
Custom graphic interface
**********************************************************/
@gfx 500 500

determineGeometry();
drawBackgroundImage();

mInteractionCircleRadius = 11. * gfx_ext_retina;

// Only update plugin parameters if the user click and drag interaction circle
mClickingAtCircle = clickingOnInteractionCircle(mPreviousMouseCap, mPosX, mPosY, mInteractionCircleRadius, mClickingAtCircle);
// Save current mouse_cap value in order to use in the above test at next iteration
mPreviousMouseCap = mouse_cap;


// Reset azimuth and spread on mouse click
mClickingAtCircle ?
(
  mMouseY = mouse_y - gCenterY;
  slider1 = -180. * (mMouseY / gRadius);
  (slider1<0) ? 
  (
    slider1 = 0
  ) : (
    (slider1 > 180.) ? (
      slider1 = 180.;
    );
  );

  // Notify GUI that azimuth has changed, and update coefficients
  slider_automate(slider1);
  mAzimuth = slider1 * 0.5 * kDeg2Rad;
  calculateCoefficients();
  
  mHiglightCircle = 1;
) : (
  mHiglightCircle = hoverOverInteractionCircle(mPosX, mPosY, mInteractionCircleRadius);
);


mPosX = gCenterX;
mPosY = gCenterY - 2 * gRadius * mAzimuth / $pi;

// Draw arc indicating spread
gxColorSetHsl(1.0, 48., 1.0, 0.5);
gfx_arc(gCenterX, gCenterY, gRadius+0.5, mAzimuth, -mAzimuth, 1); 
gfx_arc(gCenterX, gCenterY, gRadius-0.5, mAzimuth, -mAzimuth, 1); 
gfx_arc(gCenterX, gCenterY, gRadius, mAzimuth, -mAzimuth, 1); 
drawLineSegment(gCenterX, gCenterY, gCenterX-mSinAzi*gRadius, gCenterY-mCosAzi*gRadius, 1);
drawLineSegment(gCenterX, gCenterY, gCenterX+mSinAzi*gRadius, gCenterY-mCosAzi*gRadius, 1);


// Draw circle for interaction
gxColorSetHsl(1.0, 195., 1.0, 0.4 + 0.15 * mHiglightCircle);
drawLineSegment(gCenterX, gCenterY, mPosX, mPosY, 1);
drawInteractionCircle(mPosX, mPosY, mInteractionCircleRadius);

/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

mInverseSamplesblock = 1. / samplesblock;

// Counter is called "ii" rather than "i" in order to ensure that we do not use the same counter here as in other sections
ii = 0;
loop(8,
  matrixInc[ii] = (matrixNewDSP[ii] - matrixDSP[ii]) * mInverseSamplesblock;
  ii += 1;
);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

ii = 0;
loop(8,
  matrixDSP[ii] += matrixInc[ii];
  ii += 1;
);

inL = spl0;
inR = spl1;

// Matrix multiplication with input signal:
spl0 = inL * matrixDSP[0] + inR * matrixDSP[1];
spl1 = inL * matrixDSP[2] + inR * matrixDSP[3];
spl2 = inL * matrixDSP[4] + inR * matrixDSP[5];
spl3 = 0.0;

