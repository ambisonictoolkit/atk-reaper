/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Quadraphonic encoder.
  
  The quadraphonic signal is encoded as four planewaves arriving at
  [ -45, 45, -135, 135 ] degrees (navigational). This encoding is equivalent to 
  placing infinitely distant loudspeakers around a soundfield microphone 
  in an anechoic chamber.

---------------------------------------------------------------------
*/

desc: ATK FOA Encode Quadraphonic
// Quadraphonic encoder (L - R - SL - SR)


// Import library with shared functions, also imports cookdsp
import ../../libraries/atk/atk.jsfx-inc


in_pin:L
in_pin:R
in_pin:SL
in_pin:SR

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z


/**********************************************************
Initialisation
**********************************************************/
@init

// Allocation of memory for matrix used for DSP processing
matrixDSP       = 1200;

// Interaction point:
mCosAzi  = cos(45.*kDeg2Rad);
mSinAzi  = sin(45.*kDeg2Rad);

// W
matrixDSP[0]  =  kInvSqrt2;
matrixDSP[1]  =  kInvSqrt2;
matrixDSP[2]  =  kInvSqrt2;
matrixDSP[3]  =  kInvSqrt2;
// X
matrixDSP[4]  =  mCosAzi;
matrixDSP[5]  =  mCosAzi;
matrixDSP[6]  = -mCosAzi;
matrixDSP[7]  = -mCosAzi;
// Y
matrixDSP[8]  =  mSinAzi;
matrixDSP[9]  = -mSinAzi;
matrixDSP[10] =  mSinAzi;
matrixDSP[11] = -mSinAzi;
// Z
matrixDSP[12] =  0.;
matrixDSP[13] =  0.;
matrixDSP[14] =  0.;
matrixDSP[15] =  0.;

// Initiate graphics
gfx_ext_retina = 1;


/**********************************************************
Custom graphic interface
**********************************************************/
@gfx 500 500

determineGeometry();

// Reduce circle radius
gRadius -= 30 * gfx_ext_retina;

drawBackgroundImage( 0 );
drawFuMa();

mDeltaX = gRadius * mCosAzi;
mDeltaY = gRadius * mSinAzi;

// Size, saturation and luminocity depends on posZ
gainToColor(0., -24., 6., 0.);

drawSourceLocation( gCenterX - mDeltaY, gCenterY - mDeltaX, 0., 1. );
drawSourceLocation( gCenterX + mDeltaY, gCenterY - mDeltaX, 0., 1. );
drawSourceLocation( gCenterX - mDeltaY, gCenterY + mDeltaX, 0., 1. );
drawSourceLocation( gCenterX + mDeltaY, gCenterY + mDeltaX, 0., 1. );

mDeltaX = ( gRadius + 20 * gfx_ext_retina ) * mCosAzi;
mDeltaY = ( gRadius + 20 * gfx_ext_retina ) * mSinAzi;

drawSpeakerPositiion( gCenterX - mDeltaY, gCenterY - mDeltaX, "1", 0 );
drawSpeakerPositiion( gCenterX + mDeltaY, gCenterY - mDeltaX, "2", 0 );
drawSpeakerPositiion( gCenterX - mDeltaY, gCenterY + mDeltaX, "3", 0 );
drawSpeakerPositiion( gCenterX + mDeltaY, gCenterY + mDeltaX, "4", 0 );


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

// If less then 4 channels, prevent spurious high values due to uninitialised channel signals
(num_ch < 4) ? (
  i = num_ch;
  loop (4 - num_ch,
    spl(i) = 0.;
    i += 1;
  );
);

inL  = spl0;
inR  = spl1;
inSL = spl2;
inSR = spl3;

// Matrix multiplication with input signal:
spl0 = inL * matrixDSP[0]  + inR * matrixDSP[1]  + inSL * matrixDSP[2]  + inSR * matrixDSP[3];
spl1 = inL * matrixDSP[4]  + inR * matrixDSP[5]  + inSL * matrixDSP[6]  + inSR * matrixDSP[7];
spl2 = inL * matrixDSP[8]  + inR * matrixDSP[9]  + inSL * matrixDSP[10] + inSR * matrixDSP[11];
spl3 = 0.;

