/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Periphonic (3D) dual ring, regular cylindrical encoder.
  
  Inputs are in anti-clockwise order, beginning with the top ring. 
  The position of the first speaker is either centre or left of centre. 
  This encoding is equivalent to placing infinitely distant loudspeakers
  around a soundfield microphone in an anechoic chamber.

---------------------------------------------------------------------
*/

desc: ATK FOA Encode Periphonic 3D
// Periphonic (3D) dual ring, regular cylindrical encoder


// Import library with shared functions, also imports cookdsp
import ../../libraries/atk/atk.jsfx-inc


in_pin:1
in_pin:2
in_pin:3
in_pin:4
in_pin:5
in_pin:6
in_pin:7
in_pin:8
in_pin:9
in_pin:10
in_pin:11
in_pin:12
in_pin:13
in_pin:14
in_pin:15
in_pin:16
in_pin:17
in_pin:18
in_pin:19
in_pin:20
in_pin:21
in_pin:22
in_pin:23
in_pin:24
in_pin:25
in_pin:26
in_pin:27
in_pin:28
in_pin:29
in_pin:30
in_pin:31
in_pin:32

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z


slider1:4<2,16,1>Number of speakers pairs
slider2:35<0,90,1>Elevation
slider3:0<0,1,1{Flat, Point}>Speaker orientation


options:no_meter


/**********************************************************
Initialisation
**********************************************************/
@init

// Allocation of memory for matrix used for DSP processing
sIn        = 1000;
matrixDSP  = 1200;

function calculateEncodeMatrix()
(
  mSpeakerAziDelta = $pi * 2.0 / mNumSpeakerPairs;

  (mSpeakerLayout==0) ? (
    mSpeakerAzi = 0.5 * mSpeakerAziDelta;
  ) : (
    mSpeakerAzi = 0.;
  );

  // Clear the matrix
  i = 0;
  loop(128,
    matrixDSP[i] = 0.;
    i += 1;
  );

  i = 0;
  loop(mNumSpeakerPairs,
    // Upper ring
    matrixDSP[i]    = kInvSqrt2;                          // W
    matrixDSP[i+32] = cos(mSpeakerAzi)*mCosEle;           // X
    matrixDSP[i+64] = sin(mSpeakerAzi)*mCosEle;           // Y
    matrixDSP[i+96] = mSinEle;                            // Z
    
    // Lower ring
    matrixDSP[mNumSpeakerPairs+i]    =  matrixDSP[i];     // W
    matrixDSP[mNumSpeakerPairs+i+32] =  matrixDSP[i+32];  // X
    matrixDSP[mNumSpeakerPairs+i+64] =  matrixDSP[i+64];  // Y
    matrixDSP[mNumSpeakerPairs+i+96] = -matrixDSP[i+96];  // Z
    
    mSpeakerAzi += mSpeakerAziDelta;
    i += 1;
  );
);

// Initiate graphics
gfx_ext_retina = 1;

// Prevent auto clear of each frame
gfx_clear = -1;


/**********************************************************
Updated slider value:
**********************************************************/
@slider

// Round off in case user types in a decimal value
mNumSpeakerPairs   = floor(slider1+0.5);
slider1 = mNumSpeakerPairs;
slider_automate(slider1);

mElevation = slider2 * kDeg2Rad;
mCosEle = cos(mElevation);
mSinEle = sin(mElevation);

mSpeakerLayout = slider3;

calculateEncodeMatrix();


/**********************************************************
Custom graphic interface
**********************************************************/
@gfx 400 800

mChannelWarning = testNumChannels( mNumSpeakerPairs * 2 );

determinePeriphonicGeometry();

// Reduce circle radius, but not if UI is small
( !gResponsive ) ? (
  gRadius -= 30 * gfx_ext_retina;
);

// Only refresh GUI when needed
( geometryHasChanged( mPrevWidth, mPrevHeight ) || ( slider1 != mPrevSlider1 ) || ( slider2 != mPrevSlider2 ) || ( slider3 != mPrevSlider3 ) || ( mChannelWarning != mPrevChannelWarning ) ) ? (
  drawPeriphonicBackgroundImage( 0 );
  drawFuMa();

  ( mSpeakerLayout == 0 ) ? (
    mSpeakerAzi = 0.5 * mSpeakerAziDelta;
  ) : (
    mSpeakerAzi = 0.;
  );
  
  igfx = 1;
  
  loop( mNumSpeakerPairs,
    
    // Indicate speaker locations
    mDeltaX = gRadius * sin( mSpeakerAzi ) * mCosEle;
    mDeltaY = gRadius * cos( mSpeakerAzi ) * mCosEle;
    
    gainToColor(0., -24., 6., 0.0);
    
    drawSourceLocation( gCenterX - mDeltaX,  gCenterYUpper - mDeltaY,  mSinEle, 1., 0 );
    drawSourceLocation( gCenterX - mDeltaX,  gCenterYLower - mDeltaY,  mSinEle, 1., 0 );
    
    // Indicate channel numbering
    ( !gResponsive ) ? (
      mDeltaX = ( gRadius + 20. * gfx_ext_retina ) * sin( mSpeakerAzi );
      mDeltaY = ( gRadius + 20. * gfx_ext_retina ) * cos( mSpeakerAzi );
    
      // Upper speakers
      sprintf( spkStr, "%d", igfx );
      drawSpeakerPositiion( gCenterX - mDeltaX, gCenterYUpper - mDeltaY, spkStr, 0 );
  
      // Lower speakers
      sprintf( spkStr, "%d", igfx + mNumSpeakerPairs );
      drawSpeakerPositiion( gCenterX - mDeltaX, gCenterYLower - mDeltaY, spkStr, 0 );
    );
    
    mSpeakerAzi += mSpeakerAziDelta;
    igfx += 1;
  );
  
  // Draw titles
  ( !gResponsive ) ? (
    gfx_x = 20 * gfx_ext_retina;
    gfx_y = 42. * gfx_ext_retina;
    gfx_drawstr( "Upper Ring" );
  
    gfx_x = 20 * gfx_ext_retina;
    gfx_y = gCenterYLower - ( gRadius - 0. * gfx_ext_retina);
    gfx_drawstr( "Lower Ring" );
  );
  
  // Illustrate elevation angle
  xPos1 = gCenterX + 0.75 * gRadius;
  yPos1 = gCenterY;
  xPos2 = gCenterX + 1.25 * gRadius;
  yPos2 = gCenterY;
  drawLineSegment( xPos1, yPos1, xPos2, yPos2, 1 );

  xPos2 = gCenterX + ( 0.75 + 0.5 * cos( mElevation ) ) * gRadius;
  yPos2 = gCenterY          - 0.5 * sin( mElevation )   * gRadius;
  drawLineSegment( xPos1, yPos1, xPos2, yPos2, 1 );
  
  xPos2 = gCenterX + ( 0.75 + 0.5 * cos( mElevation ) ) * gRadius;
  yPos2 = gCenterY          + 0.5 * sin( mElevation )   * gRadius;
  drawLineSegment( xPos1, yPos1, xPos2, yPos2, 1 );
  
  gfx_arc( xPos1, yPos1, 0.22 * gRadius, $pi * 0.5, $pi * 0.5 - mElevation, 1. );
  gfx_arc( xPos1, yPos1, 0.18 * gRadius, $pi * 0.5, $pi * 0.5 + mElevation, 1. );
  
  mChannelWarning ? drawChannelWarning( mNumSpeakerPairs * 2 );
  
  mPrevWidth          = gfx_w;
  mPrevHeight         = gfx_h;
  mPrevSlider1        = slider1;
  mPrevSlider2        = slider2;
  mPrevSlider3        = slider3;
  mPrevChannelWarning = mChannelWarning;
);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

// If less then 32 channels, prevent spurious high values due to uninitialised channel signals
(num_ch < 32) ? (
  i = num_ch;
  loop ( 32 - num_ch,
    spl( i ) = 0.;
    i += 1;
  );
);

sIn[  0 ] = spl0;
sIn[  1 ] = spl1;
sIn[  2 ] = spl2;
sIn[  3 ] = spl3;
sIn[  4 ] = spl4;
sIn[  5 ] = spl5;
sIn[  6 ] = spl6;
sIn[  7 ] = spl7;
sIn[  8 ] = spl8;
sIn[  9 ] = spl9;
sIn[ 10 ] = spl10;
sIn[ 11 ] = spl11;
sIn[ 12 ] = spl12;
sIn[ 13 ] = spl13;
sIn[ 14 ] = spl14;
sIn[ 15 ] = spl15;
sIn[ 16 ] = spl16;
sIn[ 17 ] = spl17;
sIn[ 18 ] = spl18;
sIn[ 19 ] = spl19;
sIn[ 20 ] = spl20;
sIn[ 21 ] = spl21;
sIn[ 22 ] = spl22;
sIn[ 23 ] = spl23;
sIn[ 24 ] = spl24;
sIn[ 25 ] = spl25;
sIn[ 26 ] = spl26;
sIn[ 27 ] = spl27;
sIn[ 28 ] = spl28;
sIn[ 29 ] = spl29;
sIn[ 30 ] = spl30;
sIn[ 31 ] = spl31;

spl0 = 0.;
spl1 = 0.;
spl2 = 0.;
spl3 = 0.;

ii = 0;
loop(mNumSpeakerPairs,
  spl0 += sIn[ii] * matrixDSP[ii]    + sIn[mNumSpeakerPairs+ii] * matrixDSP[mNumSpeakerPairs+ii];    // W
  spl1 += sIn[ii] * matrixDSP[ii+32] + sIn[mNumSpeakerPairs+ii] * matrixDSP[mNumSpeakerPairs+ii+32]; // X
  spl2 += sIn[ii] * matrixDSP[ii+64] + sIn[mNumSpeakerPairs+ii] * matrixDSP[mNumSpeakerPairs+ii+64]; // Y
  spl3 += sIn[ii] * matrixDSP[ii+96] + sIn[mNumSpeakerPairs+ii] * matrixDSP[mNumSpeakerPairs+ii+96]; // Z
  ii += 1;
);

// Avoid input sound from leaking through on channel 5-16:
spl4 =  0.;
spl5 =  0.;
spl6 =  0.;
spl7 =  0.;
spl8 =  0.;
spl9 =  0.;
spl10 = 0.;
spl11 = 0.;
spl12 = 0.;
spl13 = 0.;
spl14 = 0.;
spl15 = 0.;
spl16 = 0.;
spl17 = 0.;
spl18 = 0.;
spl19 = 0.;
spl20 = 0.;
spl21 = 0.;
spl22 = 0.;
spl23 = 0.;
spl24 = 0.;
spl25 = 0.;
spl26 = 0.;
spl27 = 0.;
spl28 = 0.;
spl29 = 0.;
spl30 = 0.;
spl31 = 0.;
