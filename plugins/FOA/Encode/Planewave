/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Planewave
  Standard 1st order planewave encoder

  This operates on one source.

---------------------------------------------------------------------
*/

desc: ATK FOA Encode Planewave
// Encode a mono signal as a directional (planewave) soundfield


// Import library with shared functions, also imports cookdsp
import ../../libraries/atk/atk.jsfx-inc


slider1:0<180,-180,1>Azimuth Left (mouse)
slider2:0<-90,90,1>Elevation

in_pin:M

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z


options:no_meter


/**********************************************************
Initialisation
**********************************************************/
@init

// Allocation of memory for matrixes used for DSP processing
matrixDSP       = 1200;
matrixNewDSP    = 1220;
matrixInc       = 1240;

// Flag indicating that the plugin has not been fully initialised yet
mInitialised = 0;

// Initiate graphics
gfx_ext_retina = 1;

// Prevent auto clear of each frame
gfx_clear = -1;

// Initialisation of user interaction parameters
mPreviousMouseCap = 0;
mClickingAtCircle = 0;

function calculateCoefficients()
(
  // Interaction point:
  mCosAzi  = cos( mAzimuth );
  mSinAzi  = sin( mAzimuth );
  mCosEle  = cos( mElevation );
  mSinEle  = sin( mElevation );
  
  // W
  matrixNewDSP[ 0 ] = kInvSqrt2;
  // X
  matrixNewDSP[ 1 ] = mCosAzi * mCosEle;
  // Y
  matrixNewDSP[ 2 ] = mSinAzi * mCosEle;
  // Z
  matrixNewDSP[ 3 ] = mSinEle;
  
  // Set initial DSP processing coefficients if the plugin has not yet been initialised
  mInitialised == 0 ?
  (
    i = 0;
    loop(4,
      matrixDSP[ i ] = matrixNewDSP[ i ];
    );
    // Now we are fully initialised
    mInitialised = 1;
  );
);


/**********************************************************
Updated slider value:
**********************************************************/
@slider

mAzimuth     = slider1 * kDeg2Rad;
mElevation   = slider2 * kDeg2Rad;
calculateCoefficients();


/**********************************************************
Custom graphic interface
**********************************************************/
@gfx 500 500

mChannelWarning = testNumChannels( 4 );

determineGeometry();

// Only update plugin parameters if the user click and drag interaction circle
mClickingAtCircle = clickingOnInteractionCircle( mPreviousMouseCap, mPosX, mPosY, mInteractionCircleRadius, mClickingAtCircle );

// Save current mouse_cap value in order to use in the above test at next iteration
mPreviousMouseCap = mouse_cap;

// Reset azimuth and spread on mouse click
mClickingAtCircle ?
(
  mMouseX  = mouse_x - gCenterX;
  mMouseY  = mouse_y - gCenterY;
  mAzimuth = atan2( -mMouseX, -mMouseY );
  slider1  = mAzimuth * kRad2Deg;
  
  // Notify GUI that azimuth has changed, and update coefficients
  slider_automate( slider1 );

  calculateCoefficients();
  
  mHiglightCircle = 1;
) : (
  // Check hover relative to most recently drawn position
  mHiglightCircle = hoverOverInteractionCircle( mPosX, mPosY, mInteractionCircleRadius );
);

// Only refresh GUI when needed
( geometryHasChanged( mPrevWidth, mPrevHeight ) || ( slider1 != mPrevSlider1 ) || ( slider2 != mPrevSlider2 ) || ( mChannelWarning != mPrevChannelWarning ) ) ? (
  
  drawBackgroundImage( 0 );
  drawFuMa();
  
  // Force redraw of interaction circle
  mPrevHHiglightCircle = -1;
  
  // Draw channel warning if needed
  mChannelWarning ? drawChannelWarning( 4 );
  
  mPrevWidth          = gfx_w;
  mPrevHeight         = gfx_h;
  mPrevSlider1        = slider1;
  mPrevSlider2        = slider2;
  mPrevChannelWarning = mChannelWarning;
);

// Draw circle for interaction
( ( mHiglightCircle != mPrevHHiglightCircle ) && !mChannelWarning ) ? (
  
  // Color depends on elevation, mouseClick and mouseHover
  (mSinEle < 0) ? (
    mSaturation = 1. - 0.25*mSinEle;
    mLightness = 0.4;
  ) : (
    mSaturation = 1.;
    mLightness = 0.4 + 0.25*mSinEle;
  );
  gxColorSetHsl( 1.0, 195., mSaturation, mLightness + 0.15 * mHiglightCircle );

  // Position and radius depends on elevation
  mPosX = gCenterX - gRadius * ( mSinAzi * mCosEle );
  mPosY = gCenterY - gRadius * ( mCosAzi * mCosEle );
  mInteractionCircleRadius = ( 4. * mSinEle + 11. ) * gfx_ext_retina;

  // Draw line from centre to interaciton circle
  drawLineSegment( gCenterX, gCenterY, mPosX, mPosY, 1 );
  
  drawInteractionCircle( mPosX, mPosY, mInteractionCircleRadius );
  
  mPrevHHiglightCircle = mHiglightCircle;
);


/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

mInverseSamplesblock = 1. / samplesblock;

// Counter is called "ii" rather than "i" in order to ensure that we do not use the same counter here as in other sections
ii = 0;
loop(4,
  matrixInc[ ii ] = ( matrixNewDSP[ ii ] - matrixDSP[ ii ] ) * mInverseSamplesblock;
  ii += 1;
);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

ii = 0;
loop(4,
  matrixDSP[ ii ] += matrixInc[ ii ];
  ii += 1;
);

inMono = spl0;

// Matrix multiplication with input signal:
spl0 = inMono * matrixDSP[ 0 ];
spl1 = inMono * matrixDSP[ 1 ];
spl2 = inMono * matrixDSP[ 2 ];
spl3 = inMono * matrixDSP[ 3 ];

