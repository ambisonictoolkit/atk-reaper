/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Dominate
  Apply dominance to a first order ambisonic signal (B-format) along an arbitrary axis
---------------------------------------------------------------------
*/


desc: ATK FOA Transform Dominate
// Apply dominance to a first order ambisonic signal along an arbitrary axis


// Import library with shared functions, also imports cookdsp
import ../../libraries/atk/atk.jsfx-inc


in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z


slider1:0<180,-180,0.1>Azimuth (mouse)
slider2:0<-90,90,0.1>Elevation
slider3:0<-0.,24.,0.05>Gain increase in dB (mouse)


options:no_meter


/**********************************************************
Initialisation
**********************************************************/
@init

// Flag indicating that the plugin has not been fully initialised yet
mInitialised = 0;

mAzimuth   = 0;
mElevation = 0.;

// Constants
kInv24   = 1. / 24.;

// Setting memory locations for a number of 4x4 matrixes as 1D arrays
matrixRotate1   = 1000;
matrixTumble1   = 1020;
matrixTransform = 1040;
matrixTumble2   = 1060;
matrixRotate2   = 1080;

// These are used for matrix multiplications
matrixTemp1     = 1100;
matrixTemp2     = 1120;

// Resulting matrixes used for DSP processing
matrixDSP       = 1200;
matrixNewDSP    = 1220;
matrixInc       = 1240;

// Matrixes for graphic display of transformations
matrixDisplayPoints      = 1300;
matrixDisplayTransformed = 1400;
matrixDisplayInterpreted = 1500;

// This only needs to be generated once:
numDisplayedPoints = 24;
generateDisplaySignalMatrix( matrixDisplayPoints, numDisplayedPoints );

// Initiate graphics
gfx_ext_retina = 1;

// Prevent auto clear of each frame
gfx_clear = -1;

// This only needs to be generated once:
mNumDisplayedPoints = 24;
generateDisplaySignalMatrix( matrixDisplayPoints, mNumDisplayedPoints );

// Initialisation of user interaction parameters
mPreviousMouseCap = 0;
mClickingAtCircle = 0;


function calculateMatrix()
(
  // Required for graphics
  mCosAzimuth   = cos( mAzimuth );
  mSinAzimuth   = sin( mAzimuth );

  mCosElevation = cos( mElevation );
  mSinElevation = sin( mElevation );
  
  // Generate matrixes
  generateRotationMatrix( matrixRotate1,   -mAzimuth );
  generateTumblelMatrix(  matrixTumble1,   -mElevation );
  generateDominateMatrix( matrixTransform,  mGain );
  generateRotationMatrix( matrixRotate2,    mAzimuth );
  generateTumblelMatrix(  matrixTumble2,    mElevation );
  
  /* Build processing matrix by performing a series of matrix multiplications
                        result =         left     X               right             */
  matrixMultiplication  ( matrixTemp1,    4, 4, matrixTumble1,     4, 4, matrixRotate1 );
  matrixMultiplication  ( matrixTemp2,    4, 4, matrixTransform,   4, 4, matrixTemp1 );
  matrixMultiplication  ( matrixTemp1,    4, 4, matrixTumble2,     4, 4, matrixTemp2 );
  matrixMultiplication  ( matrixNewDSP,   4, 4, matrixRotate2,     4, 4, matrixTemp1 );
  
  /* Transformation and interpretation of display points */
  matrixMultiplication( matrixDisplayTransformed, 4, 4, matrixNewDSP, 4, numDisplayedPoints, matrixDisplayPoints );
  interpreteProcessedPoints( matrixDisplayInterpreted, matrixDisplayTransformed, numDisplayedPoints );
  
  // Set initial DSP processing coefficients if the plugin has not yet been initialised
  mInitialised == 0 ?
  (
    i = 0;
    loop(16,
      matrixDSP[ i ] = matrixNewDSP[ i ];
    );
    // Now we are fully initialised
    mInitialised = 1;
  );
);


/**********************************************************
Updated slider value:
**********************************************************/
@slider

mAzimuth         = slider1 * kDeg2Rad;
mElevation       = slider2 * kDeg2Rad;
mGain            = slider3;

calculateMatrix();


/**********************************************************
Graphics
**********************************************************/
@gfx 500 500

mChannelWarning = testNumChannels( 4 );

determineGeometry();

// Radius of interaction circle
kInteractionCircleRadius = 11. * gfx_ext_retina;

// Only update plugin parameters if the user click and drag interaction circle
mClickingAtCircle = clickingOnInteractionCircle(mPreviousMouseCap, mPosX, mPosY, mInteractionCircleRadius, mClickingAtCircle);

// Save current mouse_cap value in order to use in the above test at next iteration
mPreviousMouseCap = mouse_cap;

(mClickingAtCircle) ? (    
  mMouseX = mouse_x - gCenterX;
  mMouseY = mouse_y - gCenterY;
  
  // Update mAzimuth and slider1 and notify GUI of the change
  mAzimuth = atan2( -mMouseX, -mMouseY );
  slider1 = mAzimuth * kRad2Deg;
  slider_automate( slider1 );
  
  // At (abs(elevation) > 88 degrees) it becomes meaningless to alter the transformation angle
  ( mCosElevation > kCos88 ) ? (
    // Update transformAngle and slider3 and notify GUI of the change
    slider3 = 24. * sqrt( mMouseX*mMouseX + mMouseY*mMouseY ) * gInverseRadius / mCosElevation;
    // Restrict the range to [0, 24]
    slider3 > 24. ? slider3 = 24.;
    mGain    = slider3;
    slider_automate( slider3 );
  );
  
  calculateMatrix();
  
  mHiglightCircle = 1;
) : (
  mHiglightCircle = hoverOverInteractionCircle(mPosX, mPosY, mInteractionCircleRadius);
);

// Only refresh GUI when needed
( geometryHasChanged( mPrevWidth, mPrevHeight ) || ( slider1 != mPrevSlider1 ) || ( slider2 != mPrevSlider2 ) || ( slider3 != mPrevSlider3 ) || ( mChannelWarning != mPrevChannelWarning ) ) ? (
  
  drawBackgroundImage( 1 );
  drawFuMa();
  
  // Draw points illustrating the effect of the transform
  displayTransformedPoints( matrixDisplayInterpreted, numDisplayedPoints, 0 );
  
  // Force redraw of interaction circle
  mPrevHHiglightCircle = -1;
  
  // Draw channel warning if needed
  mChannelWarning ? drawChannelWarning( 4 );
  
  mPrevWidth          = gfx_w;
  mPrevHeight         = gfx_h;
  mPrevSlider1        = slider1;
  mPrevSlider2        = slider2;
  mPrevSlider3        = slider3;
  mPrevChannelWarning = mChannelWarning;
);

// Redraw interaction circle when needed - avoid if channel warning
( ( mHiglightCircle != mPrevHHiglightCircle ) && !mChannelWarning ) ? (
  
  // Color depends on elevation, mouseClick and mouseHover
  mSinElevation < 0 ? (
    mSaturation = 1. - 0.25 * mSinElevation;
    mLightness = 0.4;
  ) : (
    mSaturation = 1.;
    mLightness = 0.4 + 0.25 * mSinElevation;
  );
  gxColorSetHsl(1.0, 195., mSaturation, mLightness + 0.15 * mHiglightCircle );
  
  // Position and radius depends on elevation
  mPosX = gCenterX - gRadius * slider3 * kInv24 * ( mSinAzimuth * mCosElevation );
  mPosY = gCenterY - gRadius * slider3 * kInv24 * ( mCosAzimuth * mCosElevation );
  mInteractionCircleRadius = 4. * mSinElevation + kInteractionCircleRadius;
  
  drawInteractionCircle( mPosX, mPosY, mInteractionCircleRadius );
  
  mPrevHHiglightCircle = mHiglightCircle;
);


/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

mInverseSamplesblock = 1. / samplesblock;

// Counter is called "ii" rather than "i" in order to ensure that we do not use the same counter here as in other sections
ii = 0;
loop( 16,
  matrixInc[ ii ] = ( matrixNewDSP[ ii ] - matrixDSP[ ii ] ) * mInverseSamplesblock;
  ii += 1;
);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

ii = 0;
loop(16,
  matrixDSP[ ii ] += matrixInc[ ii ];
  ii += 1;
);

// 
wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;

// Some transforms blow up if track is 2 channels only as spl2 and spl3 might be un-ininitiated.
(num_ch == 2) ? (
  yIn = 0.;
  zIn = 0.;
);

// Matrix multiplication with input signal:
spl0 = wIn * matrixDSP[ 0 ]  + xIn * matrixDSP[ 1 ]  + yIn * matrixDSP[ 2 ]  + zIn * matrixDSP[ 3 ];
spl1 = wIn * matrixDSP[ 4 ]  + xIn * matrixDSP[ 5 ]  + yIn * matrixDSP[ 6 ]  + zIn * matrixDSP[ 7 ];
spl2 = wIn * matrixDSP[ 8 ]  + xIn * matrixDSP[ 9 ]  + yIn * matrixDSP[ 10 ] + zIn * matrixDSP[ 11 ];
spl3 = wIn * matrixDSP[ 12 ] + xIn * matrixDSP[ 13 ] + yIn * matrixDSP[ 14 ] + zIn * matrixDSP[ 15 ];
