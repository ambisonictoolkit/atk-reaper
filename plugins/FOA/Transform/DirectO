/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: DirectO
  Adjust the soundfield directivity of a first order ambisonic signal 
  (B-format) across the origin. A spatial low-pass filter.
---------------------------------------------------------------------
*/

desc: ATK FOA Transform DirectO
// Adjust soundfield directivity of first order ambisonic signal across the origin


// Import library with shared functions, also imports cookdsp
import ../../libraries/atk/atk.jsfx-inc


in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z


slider1:0<0,90,0.1>Degree of transformation
slider2:0<0,2,1{Degree of Direct Transform, Energy Normalised Intensity Vectors (rE), Potential Energy Normalised Intensity Vectors (rV)}>Display mode


options:no_meter


/**********************************************************
Initialisation
**********************************************************/
@init

// Flag indicating that the plugin has not been fully initialised yet
initialised = 0;

// Matrixes used for DSP processing
matrixDSP       = 1200;
matrixNewDSP    = 1220;
matrixInc       = 1240;

// Matrixes for graphic display of transformations
matrixDisplayPoints      = 1300;
matrixDisplayTransformed = 1400;
matrixDisplayInterpreted = 1500;

// Initiate graphics
gfx_ext_retina = 1;

// Prevent auto clear of each frame
gfx_clear = -1;

// This only needs to be generated once:
mNumDisplayedPoints = 24;
generateDisplaySignalMatrix( matrixDisplayPoints, mNumDisplayedPoints );

// This only needs to be generated once:
numDisplayedPoints = 24;
generateDisplaySignalMatrix( matrixDisplayPoints, numDisplayedPoints );

// Initialisation of user interaction parameters
mPreviousMouseCap = 0;
mClickingAtCircle = 0;

mDrawMode         = 0;

function calculateMatrix()
(
  generateDirectOrigoMatrix( matrixNewDSP, mTransformAngle );
  
  /* Transformation and interpretation of display points */
  matrixMultiplication( matrixDisplayTransformed, 4, 4, matrixNewDSP, 4, numDisplayedPoints, matrixDisplayPoints );
  interpreteProcessedPoints( matrixDisplayInterpreted, matrixDisplayTransformed, numDisplayedPoints, mDrawMode );

  // Set initial DSP matrix at initialisation
  initialised == 0 ?
  (
    loop( 16,
      matrixDSP[ i ] = matrixNewDSP[ i ];
    );
    // Now we are initialised
    initialised = 1;
  );
);

/**********************************************************
Updated slider value:
**********************************************************/
@slider

mTransformAngle     = slider1 * kDeg2Rad;
mNormTransformAngle = slider1 / 90.;
mDrawMode           = slider2;
calculateMatrix();



/**********************************************************
Graphics
**********************************************************/

@gfx 500 500

mChannelWarning = testNumChannels( 4 );

determineGeometry();

// Only update plugin parameters if the user click and drag interaction circle
mClickingAtCircle = clickingOnInteractionCircle( mPreviousMouseCap, mPosX, mPosY, gInteractionCircleRadius, mClickingAtCircle );

// Save current mouse_cap value in order to use in the above test at next iteration
mPreviousMouseCap = mouse_cap;

(mClickingAtCircle) ? (
  mMouseX  = mouse_x - gCenterX;
  mMouseY  = mouse_y - gCenterY;
  mAzimuth = atan2( mMouseX, -mMouseY );

  mNormTransformAngle = 1. - sqrt( mMouseX * mMouseX + mMouseY * mMouseY ) * gInverseRadius;
  // Restrict the range to [0, 1]
  ( mNormTransformAngle < 0. ) ? ( mNormTransformAngle = 0. );
  
  slider1 = mNormTransformAngle * 90.;
  mTransformAngle = mNormTransformAngle * $pi * 0.5;
  slider_automate( slider1 );
  calculateMatrix();
  
  mHiglightCircle = 1;
) : (
  mHiglightCircle = hoverOverInteractionCircle( mPosX, mPosY, gInteractionCircleRadius );
);

// Only refresh GUI when needed
(
  geometryHasChanged( mPrevWidth, mPrevHeight ) 
  || ( slider1 != mPrevSlider1 )
  || ( slider2 != mPrevSlider2 )
  || ( mAzimuth != mPrevAzimuth )
  || ( mChannelWarning != mPrevChannelWarning ) 
) ? (
  
  drawBackgroundImage( 1 );
  drawFuMa();

  // Draw points illustrating the effect of the transform
  displayTransformedPoints( matrixDisplayInterpreted, numDisplayedPoints, mDrawMode, 1 );
  
  // Force redraw of interaction circle
  mPrevHHiglightCircle = -1;
  
  // Draw channel warning if needed
  mChannelWarning ? drawChannelWarning( 4 );
  
  mPrevWidth          = gfx_w;
  mPrevHeight         = gfx_h;
  mPrevSlider1        = slider1;
  mPrevSlider2        = slider2;
  mPrevChannelWarning = mChannelWarning;
);

// Draw circle for interaction
( ( mHiglightCircle != mPrevHHiglightCircle ) && !mChannelWarning ) ? (
  
  // Color depends on elevation, mouseClick and mouseHover
  gxColorSetHsl( 1.0, 195., 1., 0.4 + 0.15 * mHiglightCircle );
  
  // Calculate absolute position of interaction circle
  mPosX = gCenterX + gRadius * ( 1. - mNormTransformAngle ) * sin( mAzimuth );
  mPosY = gCenterY - gRadius * ( 1. - mNormTransformAngle ) * cos( mAzimuth );
  
  drawInteractionCircle( mPosX, mPosY, gInteractionCircleRadius );
  
  mPrevHHiglightCircle = mHiglightCircle;
  mPrevAzimuth        = mAzimuth;
);


/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

inverseSamplesblock = 1. / samplesblock;

// Counter is called "ii" rather than "i" in order to ensure that we do not use the same counter here as in other sections
ii = 0;
loop( 16,
  matrixInc[ ii ] = ( matrixNewDSP[ ii ] - matrixDSP[ ii ] ) * inverseSamplesblock;
  ii += 1;
);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

ii = 0;
loop( 16,
  matrixDSP[ ii ] += matrixInc[ ii ];
  ii += 1;
);

wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;

// Some transforms blow up if track is 2 channels only as spl2 and spl3 might be un-ininitiated.
(num_ch == 2) ? (
  yIn = 0.;
  zIn = 0.;
);

// Matrix multiplication with input signal:
spl0 = wIn * matrixDSP[ 0 ]  + xIn * matrixDSP[ 1 ]  + yIn * matrixDSP[ 2 ]  + zIn * matrixDSP[ 3 ];
spl1 = wIn * matrixDSP[ 4 ]  + xIn * matrixDSP[ 5 ]  + yIn * matrixDSP[ 6 ]  + zIn * matrixDSP[ 7 ];
spl2 = wIn * matrixDSP[ 8 ]  + xIn * matrixDSP[ 9 ]  + yIn * matrixDSP[ 10 ] + zIn * matrixDSP[ 11 ];
spl3 = wIn * matrixDSP[ 12 ] + xIn * matrixDSP[ 13 ] + yIn * matrixDSP[ 14 ] + zIn * matrixDSP[ 15 ];
