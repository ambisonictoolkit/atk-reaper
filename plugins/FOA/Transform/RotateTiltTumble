/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: RotateTiltTumble
  First Order Ambisonic (FOA) multi-axes rotation transformer
---------------------------------------------------------------------
*/

desc: ATK FOA Transform RotateTiltTumble
// Rotate a first order ambisonic signal (B-format) around the z, x and y axes


// Import library with shared functions, also imports cookdsp
import ../../libraries/atk/atk.jsfx-inc


in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

// Slider range is set to [-360,360] rather than [-180, 180] for more flexible scripting of rotating movements
slider1:0<180,-180,0.1>Rotate (mouse)
slider2:0<-180,180,0.1>Tilt (mouse)
slider3:0<-180,180,0.1>Tumble (mouse)


/**********************************************************
Initialisation
**********************************************************/
@init

// Graphics constants:
mInteractionCircleRadius = 11.;

// Flag indicating that the plugin has not been fully mInitialised yet
mInitialised = 0;

// Setting memory locations for a number of 4x4 matrixes as 1D arrays
matrixRotate    = 1000;
matrixTumble    = 1020;
matrixTilt      = 1040;

// These are used for matrix multiplications
matrixTemp      = 1100;

// Resulting matrixes used for DSP processing
matrixDSP       = 1200;
matrixNewDSP    = 1220;
matrixInc       = 1240;

// Matrixes for graphic display of transformations
matrixDisplayPoints      = 1300;
matrixDisplayTransformed = 1400;
matrixDisplayInterpreted = 1500;

// This only needs to be generated once:
mNumDisplayedPoints = 24;
generateDisplaySignalMatrix(matrixDisplayPoints, mNumDisplayedPoints);

// Initiate graphics
gfx_ext_retina = 1;

// Prevent auto clear of each frame
gfx_clear = -1;

// Initialisation of user interaction parameters
mPreviousMouseCap = 0;

mClickingAtRotateCircle = 0;
mClickingAtTiltCircle   = 0;
mClickingAtTumbleCircle = 0;


function calculateCoefficients()
(
  generateRotationMatrix(matrixRotate, mRotateAngle);
  generateTiltlMatrix(matrixTilt,  mTiltAngle);
  generateTumblelMatrix(matrixTumble,  mTumbleAngle);
  
  /* Build processing matrix by performing a series of matrix multiplications
                        result =         left X                   right             */
  matrixMultiplication  (matrixTemp,     4, 4, matrixTilt,        4, 4, matrixRotate);
  matrixMultiplication  (matrixNewDSP,   4, 4, matrixTumble,      4, 4, matrixTemp);
  
  /* Transformation and interpretation of display points */
  matrixMultiplication  (matrixDisplayTransformed, 4, 4, matrixNewDSP, 4, mNumDisplayedPoints, matrixDisplayPoints);
  interpreteProcessedPoints(matrixDisplayInterpreted, matrixDisplayTransformed, mNumDisplayedPoints);
  
  // Set initial DSP processing coefficients if the plugin has not yet been mInitialised
  mInitialised == 0 ?
  (
    i = 0;
    loop(16,
      matrixDSP[i] = matrixNewDSP[i];
    );
    // Now we are fully mInitialised
    mInitialised = 1;
  );
  
  // The following are used for graphics processing:
  mCosRotation = cos(mRotateAngle);
  mSinRotation = sin(mRotateAngle);
  
  mCosTilt = cos(mTiltAngle);
  mSinTilt = sin(mTiltAngle);
  
  mCosTumble = cos(mTumbleAngle);
  mSinTumble = sin(mTumbleAngle);
);


/**********************************************************
Updated slider value:
**********************************************************/
@slider

mRotateAngle = slider1 * kDeg2Rad;
mTiltAngle   = slider2 * kDeg2Rad;
mTumbleAngle = slider3 * kDeg2Rad;

calculateCoefficients();


/**********************************************************
Custom graphic interface
**********************************************************/
@gfx 500 500

// Track geometry and draw background
determineGeometry();

// Radius of interaction circle
mInteractionCircleRadius = 11. * gfx_ext_retina;

// --- MOUSE INTERACTION - there are 7 possible cases

mClickingAtRotateCircle = clickingOnInteractionCircle( mPreviousMouseCap, mPosRotateX, mPosRotateY, mInteractionCircleRadius, mClickingAtRotateCircle );

mClickingAtRotateCircle ?
(
  // --- Case 1: Click-dragging rotation circle
  
  // Update mRotateAngle
  mMouseX = mouse_x - gCenterX;
  mMouseY = mouse_y - gCenterY;
  mRotateAngle = atan2(-mMouseX, -mMouseY);
  slider1 = mRotateAngle * kRad2Deg;
  
  // Notify GUI that rotation has changed, and update coefficients
  slider_automate(slider1);
  calculateCoefficients();
  
  // No other interaction circles should be active or highlighted
  mClickingAtTiltCircle   = 0;
  mClickingAtTumbleCircle = 0;
  
  mHiglightRotateCircle   = 1;
  mHiglightTiltCircle     = 0;
  mHiglightTumbleCircle   = 0;
) :
(  
  mClickingAtTiltCircle = clickingOnInteractionCircle(mPreviousMouseCap, mPosTiltX, mPosTiltY, mInteractionCircleRadius, mClickingAtTiltCircle);
  
  mClickingAtTiltCircle ?
  (
    // --- Case 2: Click-dragging tilt circle
    
    mMouseX = mouse_x - gCenterX;
  
    mMouseX > gRadius ? (
      mMouseX = gRadius
    ) :
    (
      mMouseX < -gRadius ? (
        mMouseX = -gRadius
      );
    );
  
    mTiltAngle = mMouseX  * $pi / gRadius;
    slider2    = mTiltAngle * kRad2Deg;
  
    // Notify GUI/automation that tilt has changed, and update coefficients
    slider_automate( slider2 );
    calculateCoefficients();
    
    // No other interaction circles should be active or highlighted
    
    // mClickingAtRotateCircle has been set earlier on
    mClickingAtTumbleCircle = 0;
    
    mHiglightRotateCircle   = 0;
    mHiglightTiltCircle     = 1;
    mHiglightTumbleCircle   = 0;
  ) :
  (
    mClickingAtTumbleCircle = clickingOnInteractionCircle( mPreviousMouseCap, mPosTumbleX, mPosTumbleY, mInteractionCircleRadius, mClickingAtTumbleCircle );
    
    mClickingAtTumbleCircle ?
    (
      // --- Case 3: Click-dragging tumble circle
      
      mMouseY = gCenterY - mouse_y;
      mMouseY > gRadius ? (
        mMouseY = gRadius
      ) : (
        mMouseY < -gRadius ? mMouseY = -gRadius;
      );
      mMouseY = mMouseY * $pi / gRadius;
      mTumbleAngle = mMouseY;
      slider3 = mTumbleAngle * kRad2Deg;
  
      // Notify GUI/automation that tumble has changed, and update coefficients
      slider_automate(slider3);
      calculateCoefficients();
      
      // No other interaction circles should be active or highlighted
      
      // mClickingAtRotateCircle has been set earlier on
      // mClickingAtTumbleCircle has been set earlier on
    
      mHiglightRotateCircle = 0;
      mHiglightTiltCircle   = 0;
      mHiglightTumbleCircle = 1;
    ) : (
      mHiglightRotateCircle = hoverOverInteractionCircle( mPosRotateX, mPosRotateY, mInteractionCircleRadius );
      
      mHiglightRotateCircle ?
      (  
        // --- Case 4: Hovering over rotation circle
        
        // No other interaction circles should be highlighted
        mHiglightTiltCircle   = 0;
        mHiglightTumbleCircle = 0;
      ) :
      (
        mHiglightTiltCircle = hoverOverInteractionCircle( mPosTiltX, mPosTiltY, mInteractionCircleRadius );
        
        mHiglightTiltCircle ?
        (  
          // --- Case 5: Hovering over tilt circle
          
          // No other interaction circles should be highlighted
          
          // mHiglightRotateCircle has been set already
          mHiglightTumbleCircle = 0;
        ) : (
          // --- Case 6: Hovering over tumble circle AND // Case 7: Mouse is neither click-dragging nor hovering
          
          mHiglightTumbleCircle = hoverOverInteractionCircle( mPosTumbleX, mPosTumbleY, mInteractionCircleRadius );
        );
      ); 
    );
  );
);

// Save current mouse_cap value in order to use in the above tests at next iteration
mPreviousMouseCap = mouse_cap;


// Only refresh GUI when needed - contrary to most plugins, highlight (mouse hovering) requires a full GUI redraw
( geometryHasChanged( mPrevWidth, mPrevHeight ) 
  || ( slider1 != lastSlider1 )
  || ( slider2 != lastSlider2 )
  || ( slider3 != lastSlider3 )
  || ( mHiglightRotateCircle != mLastHiglightRotateCircle )
  || ( mHiglightTiltCircle   != mLastHiglightTiltCircle   )
  || ( mHiglightTumbleCircle != mLastHiglightTumbleCircle )
) ? (
  
  
  drawBackgroundImage( 1 );
  drawFuMa();
  
  // --- ROTATION CIRCLE - only when highlighted
  mHiglightRotateCircle ? (
    gxColorSetHsl( 1.0, 195., 1.0, 0.4 + 0.15 * mHiglightRotateCircle );
    gfx_circle( gCenterX, gCenterY, gRadius - 0.5, 0, 1);
    gfx_circle( gCenterX, gCenterY, gRadius      , 0, 1);
    gfx_circle( gCenterX, gCenterY, gRadius + 0.5, 0, 1);
  );

  // --- TILT TRANSFORMATION PLANE

  // The plane is darker when upside down
  mCosTilt < 0 ?
  (
    gxColorSetHsl( 1.0, 195, 1.0, 0.25 + 0.15 * mHiglightTiltCircle );
  ) :
  ( 
    gxColorSetHsl( 1.0, 195., 1.0, 0.4 + 0.15 * mHiglightTiltCircle );
  );
  mTiltDeltaX = gRadius * mCosTilt;
  mTiltDeltaY = gRadius * mSinTilt * 0.1;
  mRadiusFraction = 0.2 * gRadius;

  drawQuadrangleOutline( gCenterX - mTiltDeltaX - 0.5, gCenterY - mRadiusFraction - mTiltDeltaY - 0.5,
                         gCenterX + mTiltDeltaX - 0.5, gCenterY - mRadiusFraction + mTiltDeltaY - 0.5,
                         gCenterX + mTiltDeltaX - 0.5, gCenterY + mRadiusFraction - mTiltDeltaY - 0.5,
                         gCenterX - mTiltDeltaX - 0.5, gCenterY + mRadiusFraction + mTiltDeltaY - 0.5, 
                         1. );

  drawQuadrangleOutline( gCenterX - mTiltDeltaX + 0.5, gCenterY - mRadiusFraction - mTiltDeltaY + 0.5,
                         gCenterX + mTiltDeltaX + 0.5, gCenterY - mRadiusFraction + mTiltDeltaY + 0.5,
                         gCenterX + mTiltDeltaX + 0.5, gCenterY + mRadiusFraction - mTiltDeltaY + 0.5,
                         gCenterX - mTiltDeltaX + 0.5, gCenterY + mRadiusFraction + mTiltDeltaY + 0.5, 
                         1. );
                      
  drawQuadrangleOutline( gCenterX - mTiltDeltaX, gCenterY - mRadiusFraction - mTiltDeltaY,
                         gCenterX + mTiltDeltaX, gCenterY - mRadiusFraction + mTiltDeltaY,
                         gCenterX + mTiltDeltaX, gCenterY + mRadiusFraction - mTiltDeltaY,
                         gCenterX - mTiltDeltaX, gCenterY + mRadiusFraction + mTiltDeltaY, 
                         1. ); 


  // --- TUMBLE TRANSFORMATION PLANE

  // The plane is darker when upside down
  mCosTumble < 0 ?
  (
    gxColorSetHsl( 1.0, 195, 1.0, 0.25 + 0.15 * mHiglightTumbleCircle );
  ) : 
  (
    gxColorSetHsl( 1.0, 195., 1.0, 0.4 + 0.15 * mHiglightTumbleCircle );
  
  );

  mTumbleDeltaX = gRadius * mSinTumble * 0.1;
  mTumbleDeltaY = gRadius * mCosTumble;

  drawQuadrangleOutline(gCenterX - mRadiusFraction - mTumbleDeltaX - 0.5, gCenterY - mTumbleDeltaY - 0.5,
                        gCenterX - mRadiusFraction + mTumbleDeltaX - 0.5, gCenterY + mTumbleDeltaY - 0.5,
                        gCenterX + mRadiusFraction - mTumbleDeltaX - 0.5, gCenterY + mTumbleDeltaY - 0.5,
                        gCenterX + mRadiusFraction + mTumbleDeltaX - 0.5, gCenterY - mTumbleDeltaY - 0.5,
                        1.);

  drawQuadrangleOutline(gCenterX - mRadiusFraction - mTumbleDeltaX + 0.5, gCenterY - mTumbleDeltaY + 0.5,
                        gCenterX - mRadiusFraction + mTumbleDeltaX + 0.5, gCenterY + mTumbleDeltaY + 0.5,
                        gCenterX + mRadiusFraction - mTumbleDeltaX + 0.5, gCenterY + mTumbleDeltaY + 0.5,
                        gCenterX + mRadiusFraction + mTumbleDeltaX + 0.5, gCenterY - mTumbleDeltaY + 0.5,
                        1.);

  drawQuadrangleOutline(gCenterX - mRadiusFraction - mTumbleDeltaX, gCenterY - mTumbleDeltaY,
                        gCenterX - mRadiusFraction + mTumbleDeltaX, gCenterY + mTumbleDeltaY,
                        gCenterX + mRadiusFraction - mTumbleDeltaX, gCenterY + mTumbleDeltaY,
                        gCenterX + mRadiusFraction + mTumbleDeltaX, gCenterY - mTumbleDeltaY,
                        1.);

  // Draw points illustrating the combined effect of the transforms
  displayTransformedPoints(matrixDisplayInterpreted, mNumDisplayedPoints, 0);


  // --- TUMBLE INTERACTION CIRCLE
  //TUMBLE: Draw indicator with grey inner vertical line
  mPosTumbleX = gCenterX;
  mPosTumbleY = gCenterY - mTumbleAngle * kRad2Norm * gRadius;

  gxColorSetHsl( 1.0, 195., 1.0, 0.4 + 0.15 * mHiglightTumbleCircle );
  drawInteractionCircle( mPosTumbleX, mPosTumbleY, mInteractionCircleRadius );

  gxColorSetHsl( 1.0, 195., 1.0, 0.4 );
  gxColorSet( 1.0, 0.8, 0.8, 0.8 );

  drawLineSegment( mPosTumbleX,       mPosTumbleY - mInteractionCircleRadius + 5,
                   mPosTumbleX,       mPosTumbleY + mInteractionCircleRadius - 5, 1 );
                 
  drawLineSegment( mPosTumbleX - 1.0, mPosTumbleY - mInteractionCircleRadius + 5,
                   mPosTumbleX - 1.0, mPosTumbleY + mInteractionCircleRadius - 5, 1 );

  drawLineSegment( mPosTumbleX + 1.0, mPosTumbleY - mInteractionCircleRadius + 5,
                   mPosTumbleX + 1.0, mPosTumbleY + mInteractionCircleRadius - 5, 1 );


  // --- TILT INTERACTION CIRCLE (we need to draw the circles so that Rotation is on top)

  // Absolute position of circle.
  // Y position is concstant and shifted slightly upwards from center in order to avoid intial overlap with tumble indicator
  mPosTiltX = gCenterX + mTiltAngle * kRad2Norm * gRadius;
  mPosTiltY = gCenterY - 25. * gfx_ext_retina;

  gxColorSetHsl( 1.0, 195., 1.0, 0.4 + 0.15 * mHiglightTiltCircle );
  drawInteractionCircle( gCenterX + mTiltAngle * kRad2Norm * gRadius, gCenterY - 25. * gfx_ext_retina, mInteractionCircleRadius );

  // Draw grey horisontal inner line
  gxColorSet(1.0, 0.8, 0.8, 0.8);

  drawLineSegment( mPosTiltX - mInteractionCircleRadius + 5, mPosTiltY - 1,
                   mPosTiltX + mInteractionCircleRadius - 5, mPosTiltY - 1, 1 );

  drawLineSegment( mPosTiltX - mInteractionCircleRadius + 5, mPosTiltY + 1,
                   mPosTiltX + mInteractionCircleRadius - 5, mPosTiltY + 1, 1 );
                 
  drawLineSegment( mPosTiltX - mInteractionCircleRadius + 5, mPosTiltY,
                   mPosTiltX + mInteractionCircleRadius - 5, mPosTiltY, 1 );
                
                
  // --- ROTATION INTERACTION CIRCLE
  
  // Absolute position of interaction circle
  mPosRotateX = gCenterX - gRadius * mSinRotation;
  mPosRotateY = gCenterY - gRadius * mCosRotation;
  
  gxColorSetHsl( 1.0, 195., 1.0, 0.4 + 0.15 * mHiglightRotateCircle );
  drawInteractionCircle( mPosRotateX, mPosRotateY, mInteractionCircleRadius );
  
  // Draw inner gray circle
  gxColorSet( 1.0, 0.8, 0.8, 0.8 );
  drawInteractionCircle( mPosRotateX, mPosRotateY, mInteractionCircleRadius - 7 * gfx_ext_retina );
  
  
  mPrevWidth  = gfx_w;
  mPrevHeight = gfx_h;
  
  lastSlider1 = slider1;
  lastSlider2 = slider2;
  lastSlider3 = slider3;
  
  mLastHiglightRotateCircle = mHiglightRotateCircle;
  mLastHiglightTiltCircle   = mHiglightTiltCircle;
  mLastHiglightTumbleCircle = mHiglightTumbleCircle;
);


/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

/*
mInverseSamplesblock = 1. / samplesblock;

// Linear ramp to new coefficient values over the vector to prevent clicks
incCosRotation = (mCosRotation - mCosRotationDspCoeff) * mInverseSamplesblock;
incSinRotation = (mSinRotation - mSinRotationDspCoeff) * mInverseSamplesblock;

incCosTilt  = (mCosTilt - mCosTiltDspCoeff) * mInverseSamplesblock;
incSinTilt = (mSinTilt - mSinTiltDspCoeff) * mInverseSamplesblock;

incCosTumble = (mCosTumble - mCosTumbleDspCoeff) * mInverseSamplesblock;
incSinTumble = (mSinTumble - mSinTumbleDspCoeff) * mInverseSamplesblock;

*/

mInverseSamplesblock = 1. / samplesblock;

// Counter is called "ii" rather than "i" in order to ensure that we do not use the same counter here as in other sections
ii = 0;
loop(16,
  matrixInc[ii] = (matrixNewDSP[ii] - matrixDSP[ii]) * mInverseSamplesblock;
  ii += 1;
);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

/*
// Increment matric coefficients for linear interpolation
mCosRotationDspCoeff = mCosRotationDspCoeff + incCosRotation;
mSinRotationDspCoeff = mSinRotationDspCoeff + incSinRotation;

mCosTiltDspCoeff = mCosTiltDspCoeff + incCosTilt;
mSinTiltDspCoeff = mSinTiltDspCoeff + incSinTilt;

mCosTumbleDspCoeff = mCosTumbleDspCoeff + incCosTumble;
mSinTumbleDspCoeff = mSinTumbleDspCoeff + incSinTumble;

// w remains unchanged, so we don't need to change spl0
//spl0 = spl0;

// Rotation only affects x and y:
x = spl1;
y = spl2;
// We use SpatDIF (navigational) coordinate system rather than mathematical.
// Hence we need to invert sign of mSinRotation as compared to Malham's formula.
spl1 =  x * mCosRotationDspCoeff + y * mSinRotationDspCoeff;
spl2 = -x * mSinRotationDspCoeff + y * mCosRotationDspCoeff;

// Tilt only affects y and z:
y = spl2;
z = spl3;
spl2 = y * mCosTiltDspCoeff - z * mSinTiltDspCoeff;
spl3 = y * mSinTiltDspCoeff + z * mCosTiltDspCoeff;

// Tumble only affects x and z:
x = spl1;
z = spl3;
spl1 = x * mCosTumbleDspCoeff - z * mSinTumbleDspCoeff;
spl3 = x * mSinTumbleDspCoeff + z * mCosTumbleDspCoeff;
*/

ii = 0;
loop(16,
  matrixDSP[ii] += matrixInc[ii];
  ii += 1;
);

wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;

// Matrix multiplication with input signal:
spl0 = wIn * matrixDSP[0] + xIn  * matrixDSP[1]  + yIn * matrixDSP[2]  + zIn * matrixDSP[3];
spl1 = wIn * matrixDSP[4] + xIn  * matrixDSP[5]  + yIn * matrixDSP[6]  + zIn * matrixDSP[7];
spl2 = wIn * matrixDSP[8] + xIn  * matrixDSP[9]  + yIn * matrixDSP[10] + zIn * matrixDSP[11];
spl3 = wIn * matrixDSP[12] + xIn * matrixDSP[13] + yIn * matrixDSP[14] + zIn * matrixDSP[15];